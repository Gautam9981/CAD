
Instructions to Compile and Run the Code (Java)

This guide outlines OS-specific steps to install Java (if not already installed), compile .java files, and run your Java program from the terminal.
Note: If you download the files or clone the repo (using git clone https://github.com/Gautam9981/CAD) , it will show a CAD subdirectory. If you try to compile it right after, it will complain, as the gui and cli and core components aren't in the running directory, so you move those three subdirectories within CAD to outside that directory, basically, you should have the following order of files:
CAD
├── .git/
├── cli/
├── core/
├── gui/
├── Compilation.txt
├── Main.class
├── Main.java
├── README.md

Linux (by Package Manager, assuming the packages are not already installed!)
DNF / RPM (Fedora, RHEL-based)
1. Install Java Development Kit:  
   sudo dnf install java-24(or 23)-openjdk-devel
2. Compile the project:  
   javac cli/*.java core/*.java gui/*.java Main.java
3. Run the main class:  
   java Main

Pacman (Arch-based (Arch Linux, Manjaro, etc))
1. Install OpenJDK:  
   sudo pacman -S jdk-openjdk
2. Compile the project:  
   javac cli/*.java core/*.java gui/*.java Main.java
3. Run the main class:  
   java Main

APT (Debian-based (Debian, Ubuntu, etc))
1. Install Java Development Kit:  
   sudo apt install default-jdk
2. Compile the project:  
   javac cli/*.java core/*.java gui/*.java Main.java
3. Run the main class:  
   java Main

Zypper (openSUSE)
1. Install JDK:  
   sudo zypper install java-24(or 23)-openjdk-devel
2. Compile the project:  
   javac cli/*.java core/*.java gui/*.java Main.java
3. Run the main class:  
   java Main

Eopkg (Solus)
1. Install JDK:  
   sudo eopkg install openjdk-version number(Should use eopkg search openjdk to find the latest version number)
2. Compile the project:  
   javac cli/*.java core/*.java gui/*.java Main.java
3. Run the main class:  
   java Main
Note: With Solus OS, when openjdk is installed, there may be a broken symlink between java and javac and their respective binary directories, so you may fix that by typing the following:
   sudo ln -s /usr/lib64/openjdk-(version number)/bin/java /usr/bin/java (May have to do that same for javac) (This is an optional step)

Nix (NixOS)
Option 1: nix-env 
1. Install JDK:  
   nix-env -iA nixpkgs.openjdk
2. Compile the project:  
   javac cli/*.java core/*.java gui/*.java Main.java
3. Run the main class:  
   java Main

Option 2: Editing the configuration.nix
1. Type the following: 
   sudo editor_name (vim, nano, or any others) /etc/nixos/configuration.nix
2. Find the line that says environment.SystemPackages, and add "openjdk" in that list
3. Type sudo nixos-rebuild switch (This should get the package and apply the changes)
4. Compile the project:
   javac cli/*.java core/*.java gui/*.java Main.java
5. Run the main class:
   java Main

XBPS (Void Linux)
1. Install OpenJDK:  
   sudo xbps-install -S openjdk
2. Before you compile the project, you may have to specity the PATH for the javac command and make it show up in bash, type "echo 'export JAVA_HOME=/usr/lib/jvm/java-21-openjdk' >> ~/.bashrc", then restart
3. Compile the project:  
   javac cli/*.java core/*.java gui/*.java Main.java
4. Run the main class:  
   java Main

Portage (Gentoo)
1. Install JDK:  
   sudo emerge --ask dev-java/openjdk
2. Compile the project:  
   javac cli/*.java core/*.java gui/*.java Main.java
3. Run the main class:  
   java Main

Unix-Based Systems (by Package Manager, assuming the packages are not already installed!)

BSD (FreeBSD)
1. Install OpenJDK:  
   sudo pkg install openjdk23
2. Compile the project:  
   javac cli/*.java core/*.java gui/*.java Main.java
3. Run the main class:  
   java Main

Windows

Option 1: Using WSL
Follow the same Linux-based instructions above depending on your installed WSL distribution.

Option 2: Using Windows natively (CMD or PowerShell)
1. Download and install OpenJDK from: https://jdk.java.net
2. Add bin/ from the JDK install directory to your PATH environment variable.
3. Confirm installation:  
   java -version and javac -version
4. Compile your code:  
   javac cli/*.java core/*.java gui/*.java Main.java
5. Run it:  
   java Main

Option 3: Using Microsoft Visual Studio Code (with Java Extension Pack) (Easier)
1. Install Visual Studio Code
2. Install Java Extension Pack
3. It may ask you to install a jdk, go with the latest given of Adoptium (for right now, it is 21)
4. Open the folder with your .java files
5. Press Ctrl + Shift + B or use the play button to compile and run (Run Main.java!!!)

macOS

Option 1: Using Xcode Command Line Tools
1. Install tools:  
   xcode-select --install
2. Install JDK:  
   brew install openjdk (or download manually)
3. Compile the project:  
   javac cli/*.java core/*.java gui/*.java Main.java
4. Run the main class:  
   java Main

Option 2: Using Homebrew 
1. Install Homebrew (if not installed):  
   /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
2. Install Java:  
   brew install openjdk
3. Add Java to your shell profile:
   export PATH="/opt/homebrew/opt/openjdk/bin:$PATH"
4. Compile:  
   javac cli/*.java core/*.java gui/*.java Main.java
5. Run:  
   java Main

Option 3: Using Visual Studio Code (Same instructions as for Windows)
1. Refer to Windows, Option 3 for more instructions

